//fcfs
#include <stdio.h>

void fcfs_no_arrival(int p[], int n, int bt[]) {
int wt[n], tat[n], ct[n];
wt[0] = 0;
ct[0] = bt[0];

for (int i = 1; i < n; i++)
ct[i] = ct[i - 1] + bt[i];

for (int i = 0; i < n; i++) {
tat[i] = ct[i];
wt[i] = tat[i] - bt[i];
}

float total_wt = 0, total_tat = 0;
for (int i = 0; i < n; i++) {
total_wt += wt[i];
total_tat += tat[i];
}

printf("\nP\tBT\tCT\tWT\tTAT\n");
for (int i = 0; i < n; i++)
printf("%d\t%d\t%d\t%d\t%d\n", p[i], bt[i], ct[i], wt[i], tat[i]);

printf("Avg WT: %.2f\nAvg TAT: %.2f\n", total_wt / n, total_tat / n);
}

int main() {
int n;
printf("Enter number of processes: ");
scanf("%d", &n);

int p[n], bt[n];
printf("Enter burst times:\n");
for (int i = 0; i < n; i++) {
p[i] = i + 1;
printf("P%d: ", p[i]);
scanf("%d", &bt[i]);
}

fcfs_no_arrival(p, n, bt);
return 0;
}







//sjf
#include <stdio.h>

void sjf_no_arrival(int p[], int n, int bt[]) {
int wt[n], tat[n], ct[n];

for (int i = 0; i < n - 1; i++) {
for (int j = i + 1; j < n; j++) {
if (bt[i] > bt[j]) {
int temp = bt[i]; bt[i] = bt[j]; bt[j] = temp;
temp = p[i]; p[i] = p[j]; p[j] = temp;
}
}
}

ct[0] = bt[0];
for (int i = 1; i < n; i++)
ct[i] = ct[i - 1] + bt[i];

for (int i = 0; i < n; i++) {
tat[i] = ct[i];
wt[i] = tat[i] - bt[i];
}

float total_wt = 0, total_tat = 0;
for (int i = 0; i < n; i++) {
total_wt += wt[i];
total_tat += tat[i];
}

printf("\nP\tBT\tCT\tWT\tTAT\n");
for (int i = 0; i < n; i++)
printf("%d\t%d\t%d\t%d\t%d\n", p[i], bt[i], ct[i], wt[i], tat[i]);

printf("Avg WT: %.2f\nAvg TAT: %.2f\n", total_wt / n, total_tat / n);
}

int main() {
int n;
printf("Enter number of processes: ");
scanf("%d", &n);

int p[n], bt[n];
printf("Enter burst times:\n");
for (int i = 0; i < n; i++) {
p[i] = i + 1;
printf("P%d: ", p[i]);
scanf("%d", &bt[i]);
}

sjf_no_arrival(p, n, bt);
return 0;
}













//priority
#include <stdio.h>

void priority_no_arrival(int p[], int n, int bt[], int pr[]) {
int wt[n], tat[n], ct[n];

for (int i = 0; i < n - 1; i++) {
for (int j = i + 1; j < n; j++) {
if (pr[i] > pr[j]) {
int temp = pr[i]; pr[i] = pr[j]; pr[j] = temp;
temp = bt[i]; bt[i] = bt[j]; bt[j] = temp;
temp = p[i]; p[i] = p[j]; p[j] = temp;
}
}
}

ct[0] = bt[0];
for (int i = 1; i < n; i++)
ct[i] = ct[i - 1] + bt[i];

for (int i = 0; i < n; i++) {
tat[i] = ct[i];
wt[i] = tat[i] - bt[i];
}

float total_wt = 0, total_tat = 0;
for (int i = 0; i < n; i++) {
total_wt += wt[i];
total_tat += tat[i];
}

printf("\nP\tBT\tPR\tCT\tWT\tTAT\n");
for (int i = 0; i < n; i++)
printf("%d\t%d\t%d\t%d\t%d\t%d\n", p[i], bt[i], pr[i], ct[i], wt[i], tat[i]);

printf("Avg WT: %.2f\nAvg TAT: %.2f\n", total_wt / n, total_tat / n);
}

int main() {
int n;
printf("Enter number of processes: ");
scanf("%d", &n);

int p[n], bt[n], pr[n];
printf("Enter burst time and priority:\n");
for (int i = 0; i < n; i++) {
p[i] = i + 1;
printf("P%d Burst Time: ", p[i]);
scanf("%d", &bt[i]);
printf("P%d Priority (Lower number = Higher Priority): ", p[i]);
scanf("%d", &pr[i]);
}

priority_no_arrival(p, n, bt, pr);
return 0;
}











//rr
#include <stdio.h>

void round_robin_no_arrival(int p[], int n, int bt[], int q) {

int rem_bt[n], wt[n], tat[n], ct[n], time = 0, done = 0;

for (int i = 0; i < n; i++)

rem_bt[i] = bt[i];

while (done < n) {

for (int i = 0; i < n; i++) {

if (rem_bt[i] > 0) {

if (rem_bt[i] > q) {

time += q;

rem_bt[i] -= q;

} else {

time += rem_bt[i];

ct[i] = time;

wt[i] = time - bt[i];

rem_bt[i] = 0;

done++;

}

}

}

}

for (int i = 0; i < n; i++)

tat[i] = bt[i] + wt[i];

float total_wt = 0, total_tat = 0;

for (int i = 0; i < n; i++) {

total_wt += wt[i];

total_tat += tat[i];

}

printf("\nP\tBT\tWT\tTAT\tCT\n");

for (int i = 0; i < n; i++)

printf("%d\t%d\t%d\t%d\t%d\n", p[i], bt[i], wt[i], tat[i], ct[i]);

printf("Avg WT: %.2f\nAvg TAT: %.2f\n", total_wt / n, total_tat / n);

}

int main() {

int n, q;

printf("Enter number of processes: ");

scanf("%d", &n);

int p[n], bt[n];

printf("Enter burst times:\n");

for (int i = 0; i < n; i++) {

p[i] = i + 1;

printf("P%d: ", p[i]);

scanf("%d", &bt[i]);

}

printf("Enter time quantum: ");

scanf("%d", &q);

round_robin_no_arrival(p, n, bt, q);

return 0;

}
