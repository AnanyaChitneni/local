//obst hackerrank
#include <stdio.h>
#include <limits.h>

int main() {
    int n;
    scanf("%d", &n);

    int p[n + 1], q[n + 1];
    int c[n + 2][n + 2], r[n + 2][n + 2], w[n + 2][n + 2];

    for (int i = 1; i <= n; i++)
        scanf("%d", &p[i]);

    for (int i = 0; i <= n; i++)
        scanf("%d", &q[i]);

    for (int i = 0; i < n; i++) {
        w[i][i] = q[i];
        c[i][i] = 0;
        r[i][i] = 0;

        w[i][i + 1] = q[i] + q[i + 1] + p[i + 1];
        r[i][i + 1] = i + 1;
        c[i][i + 1] = q[i] + q[i + 1] + p[i + 1];
    }

    w[n][n] = q[n];
    c[n][n] = 0;
    r[n][n] = 0;

    for (int m = 2; m <= n; m++) {
        for (int i = 0; i <= n - m; i++) {
            int j = i + m;
            w[i][j] = w[i][j - 1] + p[j] + q[j];

            int min = INT_MAX, k_opt = 0;
            for (int k = r[i][j - 1]; k <= r[i + 1][j]; k++) {
                int cost = c[i][k - 1] + c[k][j];
                if (cost < min) {
                    min = cost;
                    k_opt = k;
                }
            }

            c[i][j] = w[i][j] + c[i][k_opt - 1] + c[k_opt][j];
            r[i][j] = k_opt;
        }
    }

    printf("%d\n", c[0][n]);
    return 0;
}




















//online compiler
#include <stdio.h>
#include <limits.h>

int n;
int p[100], q[100], c[102][102], r[102][102], w[102][102];

int find(int i, int j) {
    int min = INT_MAX;
    int l = 0;
    for (int m = r[i][j - 1]; m <= r[i + 1][j]; m++) {
        if (c[i][m - 1] + c[m][j] < min) {
            min = c[i][m - 1] + c[m][j];
            l = m;
        }
    }
    return l;
}

void optimal() {
    for (int i = 0; i < n; i++) {
        w[i][i] = q[i];
        c[i][i] = 0;
        r[i][i] = 0;

        w[i][i + 1] = q[i] + q[i + 1] + p[i + 1];
        r[i][i + 1] = i + 1;
        c[i][i + 1] = q[i] + q[i + 1] + p[i + 1];
    }

    w[n][n] = q[n];
    r[n][n] = 0;
    c[n][n] = 0;

    for (int m = 2; m <= n; m++) {
        for (int i = 0; i <= n - m; i++) {
            int j = i + m;
            w[i][j] = w[i][j - 1] + p[j] + q[j];
            int k = find(i, j);
            c[i][j] = w[i][j] + c[i][k - 1] + c[k][j];
            r[i][j] = k;
        }
    }
}

int main() {
    printf("Enter no of nodes\n");
    scanf("%d", &n);

    printf("Enter successful probabilities\n");
    for (int i = 1; i <= n; i++) {
        scanf("%d", &p[i]);
    }

    printf("Enter unsuccessful probabilities\n");
    for (int i = 0; i <= n; i++) {
        scanf("%d", &q[i]);
    }

    optimal();

    printf("Minimum cost:%d\n", c[0][n]);

    return 0;
}



output:
Enter no of nodes
4
Enter successful probabilities
3 3 1 1
Enter unsuccessful probabilities
2 3 1 1 1
Minimum cost:32


=== Code Execution Successful ===
