//job sequencing hackerrank
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int profit, deadline, index;
} Job;

int cmp(const void* a, const void* b) {
    return ((Job*)b)->profit - ((Job*)a)->profit;
}

int main() {
    int n;
    scanf("%d", &n);
    Job jobs[n];
    for (int i = 0; i < n; i++) scanf("%d", &jobs[i].profit);
    for (int i = 0; i < n; i++) scanf("%d", &jobs[i].deadline);
    for (int i = 0; i < n; i++) jobs[i].index = i + 1;
    qsort(jobs, n, sizeof(Job), cmp);
    int J[n + 1], d[n + 1];
    for (int i = 0; i <= n; i++) d[i] = 0;
    J[0] = 0; J[1] = jobs[0].index;
    d[0] = d[1] = 0;
    int k = 1, profit = jobs[0].profit;
    for (int i = 1; i < n; i++) {
        int r = k;
        while ((d[J[r]] > jobs[i].deadline) && (d[J[r]] != r)) r--;
        if ((d[J[r]] <= jobs[i].deadline) && (jobs[i].deadline > r)) {
            for (int q = k; q > r; q--) J[q + 1] = J[q];
            J[r + 1] = jobs[i].index;
            d[jobs[i].index] = jobs[i].deadline;
            k++;
            profit += jobs[i].profit;
        }
    }
    printf("%d", profit);
    return 0;
}










//online compiler
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int profit, deadline, index;
} Job;

int cmp(const void* a, const void* b) {
    return ((Job*)b)->profit - ((Job*)a)->profit;
}

int main() {
    int n;
    printf("Enter number of jobs:\n");
    scanf("%d", &n);
    Job jobs[n];
    printf("Enter profits:\n");
    for (int i = 0; i < n; i++) scanf("%d", &jobs[i].profit);
    printf("Enter deadlines:\n");
    for (int i = 0; i < n; i++) scanf("%d", &jobs[i].deadline);
    for (int i = 0; i < n; i++) jobs[i].index = i + 1;
    qsort(jobs, n, sizeof(Job), cmp);
    int J[n + 1], d[n + 1];
    for (int i = 0; i <= n; i++) d[i] = 0;
    J[0] = 0; J[1] = jobs[0].index;
    d[0] = d[1] = 0;
    int k = 1, profit = jobs[0].profit;
    for (int i = 1; i < n; i++) {
        int r = k;
        while ((d[J[r]] > jobs[i].deadline) && (d[J[r]] != r)) r--;
        if ((d[J[r]] <= jobs[i].deadline) && (jobs[i].deadline > r)) {
            for (int q = k; q > r; q--) J[q + 1] = J[q];
            J[r + 1] = jobs[i].index;
            d[jobs[i].index] = jobs[i].deadline;
            k++;
            profit += jobs[i].profit;
        }
    }
    printf("Maximum profit is: %d\n", profit);
    return 0;
}






output:
Enter number of jobs:
5
Enter profits:
20 15 10 5 1
Enter deadlines:
2 2 1 3 3 
Maximum profit is: 40


=== Code Execution Successful ===
