[6/16, 8:34 PM] Dhanush: import java.util.Scanner;

public class simple {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        sc.close();

        // Input number of vertices
        System.out.print("Enter number of vertices: ");
        int V = sc.nextInt();

        // Input adjacency matrix
        int[][] graph = new int[V][V];
        System.out.println("Enter the adjacency matrix (0 if no edge): ");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                graph[i][j] = sc.nextInt();
            }
        }

        // Call Prim's algorithm
        primMST(graph, V);
    }

    static void primMST(int[][] graph, int V) {
        int[] key = new int[V];           // Store minimum weights
        boolean[] mstSet = new boolean[V]; // Track included vertices
        int[] parent = new int[V];        // To store MST

        // Initialize all keys as infinite
        for (int i = 0; i < V; i++) {
            key[i] = Integer.MAX_VALUE;
            mstSet[i] = false;
        }

        key[0] = 0;       // Start from first vertex
        parent[0] = -1;   // First node is always the root of MST

        for (int count = 0; count < V - 1; count++) {
            int u = minKey(key, mstSet, V);
            mstSet[u] = true;

            for (int v = 0; v < V; v++) {
                if (graph[u][v] != 0 && !mstSet[v] && graph[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
            }
        }

        printMST(parent, graph, V);
    }

    static int minKey(int[] key, boolean[] mstSet, int V) {
        int min = Integer.MAX_VALUE, minIndex = -1;

        for (int v = 0; v < V; v++) {
            if (!mstSet[v] && key[v] < min) {
                min = key[v];
                minIndex = v;
            }
        }

        return minIndex;
    }

    static void printMST(int[] parent, int[][] graph, int V) {
        int cost = 0;
        System.out.println("Edge \tWeight");
        for (int i = 1; i < V; i++) {
            System.out.println((parent[i] + 1) + " - " + (i + 1) + "\t" + graph[i][parent[i]]);
            cost += graph[i][parent[i]];
        }
        System.out.println("Minimum cost of MST: " + cost);
    }
}
[6/16, 8:34 PM] Dhanush: import java.util.Scanner;

public class OBST {
    // Function to calculate sum of frequencies from i to j
    static int sum(int freq[], int i, int j) {
        int s = 0;
        for (int k = i; k <= j; k++)
            s += freq[k];
        return s;
    }

    // Function to compute minimum cost of OBST
    public static int optimalSearchTree(int key[], int freq[], int n) {
        int cost[][] = new int[n][n];

        // cost for single keys
        for (int i = 0; i < n; i++)
            cost[i][i] = freq[i];

        // l is chain length
        for (int l = 2; l <= n; l++) {
            for (int i = 0; i <= n - l; i++) {
                int j = i + l - 1;
                cost[i][j] = Integer.MAX_VALUE;

                // try making all keys in interval root
                for (int r = i; r <= j; r++) {
                    int c = ((r > i) ? cost[i][r - 1] : 0) +
                            ((r < j) ? cost[r + 1][j] : 0) +
                            sum(freq, i, j);
                    if (c < cost[i][j])
                        cost[i][j] = c;
                }
            }
        }

        return cost[0][n - 1];
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of keys: ");
        int n = sc.nextInt();

        int[] key = new int[n];
        int[] freq = new int[n];

        System.out.println("Enter keys in sorted order:");
        for (int i = 0; i < n; i++)
            key[i] = sc.nextInt();

        System.out.println("Enter frequency for each key:");
        for (int i = 0; i < n; i++)
            freq[i] = sc.nextInt();

        int minCost = optimalSearchTree(key, freq, n);
        System.out.println("Minimum cost of OBST: " + minCost);
    }
}
[6/16, 8:34 PM] Dhanush: import java.util.*;

public class PrimsAlgorithm {
    public static void main(String args[]) {
        int n; // number of vertices
        int i, j;

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of vertices:");
        n = sc.nextInt(); // Input number of vertices

        int[][] cost = new int[n][n]; // Adjacency matrix to hold edge weights

        System.out.println("Enter the cost adjacency matrix:");
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                cost[i][j] = sc.nextInt(); // Input weights between nodes
            }
        }

        int[] visited = new int[n]; // Keeps track of vertices added to MST
        visited[0] = 1; // Start from the 0th vertex

        int ne = 1; // Number of edges in MST (initially 0, increased to 1)
        int mincost = 0; // Total cost of MST

        System.out.println("The edges of Minimum Cost Spanning Tree are");

        while (ne < n) { // Loop until MST has n-1 edges
            int min = Integer.MAX_VALUE; // Initialize min to a very large number
            int a = -1, b = -1;

            for (i = 0; i < n; i++) {
                if (visited[i] == 1) { // Only consider already visited nodes
                    for (j = 0; j < n; j++) {
                        if (visited[j] == 0 && cost[i][j] < min && cost[i][j] != 0) {
                            min = cost[i][j]; // Find minimum cost edge
                            a = i;
                            b = j;
                        }
                    }
                }
            }

            if (a != -1 && b != -1) {
                System.out.println((a + 1) + " --> " + (b + 1) + " = " + min);
                mincost += min; // Add weight to total cost
                visited[b] = 1; // Mark the new node as visited
                ne++; // Increase edge count
            }
        }

        System.out.println("Minimum cost = " + mincost);
    }
}
[6/16, 8:34 PM] Dhanush: import java.util.*;

class knapsack {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter no. of items:");
        int n = sc.nextInt();

        System.out.println("Enter capacity:");
        int cap = sc.nextInt();

        int[] wt = new int[n];
        int[] val = new int[n];

        System.out.println("Enter weights:");
        for (int i = 0; i < n; i++)
            wt[i] = sc.nextInt();

        System.out.println("Enter values:");
        for (int i = 0; i < n; i++)
            val[i] = sc.nextInt();

        int[][] dp = new int[n + 1][cap + 1];

        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= cap; j++) {
                if (i == 0 || j == 0)
                    dp[i][j] = 0;
                else if (wt[i - 1] <= j)
                    dp[i][j] = Math.max(val[i - 1] + dp[i - 1][j - wt[i - 1]], dp[i - 1][j]);
                else
                    dp[i][j] = dp[i - 1][j];
            }
        }

        System.out.println("Maximum value in knapsack: " + dp[n][cap]);
    }
}
[6/16, 8:34 PM] Dhanush: import java.util.*;

public class JobSequencingEasy {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of jobs: ");
        int n = sc.nextInt();

        int[] jobId = new int[n];
        int[] deadline = new int[n];
        int[] profit = new int[n];

        System.out.println("Enter job ID, deadline, and profit:");
        for (int i = 0; i < n; i++) {
            jobId[i] = sc.nextInt();
            deadline[i] = sc.nextInt();
            profit[i] = sc.nextInt();
        }

        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (profit[i] < profit[j]) {
                    int temp = profit[i];
                    profit[i] = profit[j];
                    profit[j] = temp;

                    temp = deadline[i];
                    deadline[i] = deadline[j];
                    deadline[j] = temp;

                    temp = jobId[i];
                    jobId[i] = jobId[j];
                    jobId[j] = temp;
                }
            }
        }

        int maxDeadline = 0;
        for (int i = 0; i < n; i++) {
            if (deadline[i] > maxDeadline) {
                maxDeadline = deadline[i];
            }
        }

        int[] slot = new int[maxDeadline];
        int totalProfit = 0;

        System.out.println("Selected Jobs:");
        for (int i = 0; i < n; i++) {
            for (int j = deadline[i] - 1; j >= 0; j--) {
                if (slot[j] == 0) {
                    slot[j] = jobId[i];
                    totalProfit += profit[i];
                    System.out.println("Job ID: " + jobId[i] + ", Profit: " + profit[i]);
                    break;
                }
            }
        }

        System.out.println("Total Profit: " + totalProfit);
    }
}
[6/16, 8:34 PM] Dhanush: import java.util.Scanner;

public class OBST {
    // Function to calculate sum of frequencies from i to j
    static int sum(int freq[], int i, int j) {
        int s = 0;
        for (int k = i; k <= j; k++)
            s += freq[k];
        return s;
    }

    // Function to compute minimum cost of OBST
    public static int optimalSearchTree(int key[], int freq[], int n) {
        int cost[][] = new int[n][n];

        // cost for single keys
        for (int i = 0; i < n; i++)
            cost[i][i] = freq[i];

        // l is chain length
        for (int l = 2; l <= n; l++) {
            for (int i = 0; i <= n - l; i++) {
                int j = i + l - 1;
                cost[i][j] = Integer.MAX_VALUE;

                // try making all keys in interval root
                for (int r = i; r <= j; r++) {
                    int c = ((r > i) ? cost[i][r - 1] : 0) +
                            ((r < j) ? cost[r + 1][j] : 0) +
                            sum(freq, i, j);
                    if (c < cost[i][j])
                        cost[i][j] = c;
                }
            }
        }

        return cost[0][n - 1];
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of keys: ");
        int n = sc.nextInt();

        int[] key = new int[n];
        int[] freq = new int[n];

        System.out.println("Enter keys in sorted order:");
        for (int i = 0; i < n; i++)
            key[i] = sc.nextInt();

        System.out.println("Enter frequency for each key:");
        for (int i = 0; i < n; i++)
            freq[i] = sc.nextInt();

        int minCost = optimalSearchTree(key, freq, n);
        System.out.println("Minimum cost of OBST: " + minCost);
    }
}
[6/16, 8:34 PM] Dhanush: import java.util.*;

public class SubsetSum {

    static void findSubsets(int[] set, int target) {
        List<Integer> current = new ArrayList<>();
        System.out.println("Subsets that sum to " + target + ":");
        if (!subsetSum(set, 0, target, current)) {
            System.out.println("No solution exists.");
        }
    }

    static boolean subsetSum(int[] set, int index, int target, List<Integer> current) {
        if (target == 0) {
            System.out.println(current);
            return true;
        }

        if (index >= set.length || target < 0) {
            return false;
        }

        // Include current element
        current.add(set[index]);
        boolean found = subsetSum(set, index + 1, target - set[index], current);
        current.remove(current.size() - 1); // backtrack

        // Exclude current element
        found |= subsetSum(set, index + 1, target, current);

        return found;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of elements in set: ");
        int n = sc.nextInt();
        int[] set = new int[n];
        System.out.print("Enter the elements: ");
        for (int i = 0; i < n; i++) {
            set[i] = sc.nextInt();
        }
        System.out.print("Enter target sum: ");
        int target = sc.nextInt();

        findSubsets(set, target);
    }
}
[6/16, 8:34 PM] Dhanush: import java.util.*;

public class NQueensBT {
    static int N = 4;

    public static void main(String[] args) {
        char[][] board = new char[N][N];
        for (char[] row : board)
            Arrays.fill(row, '.');

        solveNQueens(board, 0);
    }

    static void solveNQueens(char[][] board, int col) {
        if (col == board.length) {
            printBoard(board);
            System.out.println();
            return;
        }

        for (int row = 0; row < board.length; row++) {
            if (isSafe(board, row, col)) {
                board[row][col] = 'Q';
                solveNQueens(board, col + 1);
                board[row][col] = '.'; // backtrack
            }
        }
    }

    static boolean isSafe(char[][] board, int row, int col) {
        // Check same row on left side
        for (int j = 0; j < col; j++)
            if (board[row][j] == 'Q') return false;

        // Check upper-left diagonal
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 'Q') return false;

        // Check lower-left diagonal
        for (int i = row, j = col; i < board.length && j >= 0; i++, j--)
            if (board[i][j] == 'Q') return false;

        return true;
    }

    static void printBoard(char[][] board) {
        for (char[] row : board) {
            for (char c : row) {
                System.out.print(c + " ");
            }
            System.out.println();
        }
    }
}
[6/16, 8:34 PM] Dhanush: public class HamiltonianCycle {
    final int V = 5;
    int path[];

    boolean isSafe(int v, int graph[][], int path[], int pos) {
        if (graph[path[pos - 1]][v] == 0)
            return false;
        for (int i = 0; i < pos; i++)
            if (path[i] == v)
                return false;
        return true;
    }

    boolean hamCycleUtil(int graph[][], int path[], int pos) {
        if (pos == V) {
            return (graph[path[pos - 1]][path[0]] == 1);
        }

        for (int v = 1; v < V; v++) {
            if (isSafe(v, graph, path, pos)) {
                path[pos] = v;
                if (hamCycleUtil(graph, path, pos + 1))
                    return true;
                path[pos] = -1;
            }
        }
        return false;
    }

    void printSolution(int path[]) {
        System.out.print("Hamiltonian Cycle Exists: ");
        for (int i = 0; i < V; i++)
            System.out.print(path[i] + " ");
        System.out.println(path[0]);
    }

    void hamCycle(int graph[][]) {
        path = new int[V];
        for (int i = 0; i < V; i++)
            path[i] = -1;
        path[0] = 0;
        if (!hamCycleUtil(graph, path, 1)) {
            System.out.println("Solution does not exist");
            return;
        }
        printSolution(path);
    }

    public static void main(String args[]) {
        HamiltonianCycle h = new HamiltonianCycle();
        int graph1[][] = {
            {0, 1, 0, 1, 0},
            {1, 0, 1, 1, 1},
            {0, 1, 0, 0, 1},
            {1, 1, 0, 0, 1},
            {0, 1, 1, 1, 0}
        };
        h.hamCycle(graph1);
    }
}
