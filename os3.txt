//fifo page replacement algm
#include<stdio.h>

#include<string.h>

#include<stdlib.h>

void fifo(int pages[], int n, int capacity) {

int frame[capacity];

int front = 0, pageFaults = 0;

for (int i = 0; i < capacity; i++) frame[i] = -1;

printf("\nPage\t");

for (int j = 0; j < capacity; j++) printf("Frame%d\t", j + 1);

printf("Page Fault\n");

for (int i = 0; i < n; i++) {

int found = 0;

for (int j = 0; j < capacity; j++) {

if (frame[j] == pages[i]) {

found = 1;

break;

}

}

if (!found) {

frame[front] = pages[i];

front = (front + 1) % capacity;

pageFaults++;

}

printf("%-4d\t", pages[i]);

for (int j = 0; j < capacity; j++) {

if (frame[j] == -1) printf("%-4s\t", "-");

else printf("%-4d\t", frame[j]);

}

if (!found) printf("Yes\n");

else printf("No\n");

}

printf("\nTotal page faults: %d\n", pageFaults);

}

int main() {

char controlString[100];

int pages[100], n = 0, capacity;

printf("Enter the control string (space separated page numbers): ");

fgets(controlString, sizeof(controlString), stdin);

controlString[strcspn(controlString, "\n")] = 0;

char *token = strtok(controlString, " ");

while (token != NULL && strlen(token) > 0) {

pages[n++] = atoi(token);

token = strtok(NULL, " ");

}

printf("Enter number of frames: ");

scanf("%d", &capacity);

fifo(pages, n, capacity);

return 0;

}


















//lru page replacement algm
#include <stdio.h>

#include <string.h>

#include <stdlib.h>

int findLRU(int pages[], int frame[], int n, int capacity, int currentIndex) {

int lruIndex = -1, minLastUsed = currentIndex;

for (int i = 0; i < capacity; i++) {

int j;

for (j = currentIndex - 1; j >= 0; j--) {

if (frame[i] == pages[j]) {

if (j < minLastUsed) {

minLastUsed = j;

lruIndex = i;

}

break;

}

}

if (j < 0) {

return i;

}

}

return lruIndex;

}

void lru(int pages[], int n, int capacity) {

int frame[capacity];

int pageFaults = 0;

for (int i = 0; i < capacity; i++) frame[i] = -1;

printf("\nPage\t");

for (int j = 0; j < capacity; j++) printf("Frame%d\t", j + 1);

printf("Page Fault\n");

for (int i = 0; i < n; i++) {

int found = 0;

for (int j = 0; j < capacity; j++) {

if (frame[j] == pages[i]) {

found = 1;

break;

}

}

if (!found) {

int pos = (i < capacity) ? i : findLRU(pages, frame, n, capacity, i);

frame[pos] = pages[i];

pageFaults++;

}

printf("%-4d\t", pages[i]);

for (int j = 0; j < capacity; j++) {

if (frame[j] == -1) printf("%-4s\t", "-");

else printf("%-4d\t", frame[j]);

}

if (!found) printf("Yes\n");

else printf("No\n");

}

printf("\nTotal page faults: %d\n", pageFaults);

}

int main() {

char controlString[100];

int pages[100], n = 0, capacity;

printf("Enter the control string (space-separated page numbers): ");

fgets(controlString, sizeof(controlString), stdin);

controlString[strcspn(controlString, "\n")] = 0;

char *token = strtok(controlString, " ");

while (token != NULL) {

pages[n++] = atoi(token);

token = strtok(NULL, " ");

}

printf("Enter number of frames: ");

scanf("%d", &capacity);

lru(pages, n, capacity);

return 0;

}














//optimal

#include <stdio.h>

#include <string.h>

#include <stdlib.h>

int findOptimal(int pages[], int frame[], int n, int capacity, int currentIndex) {

int farthestIndex = -1;

int posToReplace = -1;

for (int i = 0; i < capacity; i++) {

int j;

for (j = currentIndex + 1; j < n; j++) {

if (frame[i] == pages[j]) {

break;

}

}

if (j == n) {

return i;

}

if (j > farthestIndex) {

farthestIndex = j;

posToReplace = i;

}

}

return posToReplace;

}

void optimal(int pages[], int n, int capacity) {

int frame[capacity];

int pageFaults = 0;

for (int i = 0; i < capacity; i++) {

frame[i] = -1;

}

printf("\nPage\t");

for (int j = 0; j < capacity; j++) {

printf("Frame%-4d\t", j + 1);

}

printf("Page Fault\n");

for (int i = 0; i < n; i++) {

int found = 0;

for (int j = 0; j < capacity; j++) {

if (frame[j] == pages[i]) {

found = 1;

break;

}

}

if (!found) {

int pos;

if (i < capacity) {

pos = i;

} else {

pos = findOptimal(pages, frame, n, capacity, i);

}

frame[pos] = pages[i];

pageFaults++;

}

printf("%-4d\t", pages[i]);

for (int j = 0; j < capacity; j++) {

if (frame[j] == -1) {

printf("%-4s\t", "-");

} else {

printf("%-4d\t", frame[j]);

}

}

if (!found) {

printf("Yes\n");

} else {

printf("No\n");

}

}

printf("\nTotal page faults: %d\n", pageFaults);

}

int main() {

char controlString[100];

int pages[100], n = 0, capacity;

printf("Enter the control string (space-separated page numbers): ");

fgets(controlString, sizeof(controlString), stdin);

char *token = strtok(controlString, " ");

while (token != NULL) {

pages[n++] = atoi(token);

token = strtok(NULL, " ");

}

printf("Enter number of frames: ");

scanf("%d", &capacity);

optimal(pages, n, capacity);

return 0;

}
