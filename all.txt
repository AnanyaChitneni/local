Week 1

public class MergeSort {

    

    // Function to merge two subarrays of arr[]

    // First subarray is arr[l..m]

    // Second subarray is arr[m+1..r]

    static void merge(int arr[], int l, int m, int r) {

        // Find sizes of two subarrays to be merged

        int n1 = m - l + 1;

        int n2 = r - m;



        /* Create temporary arrays */

        int L[] = new int[n1];

        int R[] = new int[n2];



        /*Copy data to temporary arrays*/

        for (int i = 0; i < n1; ++i)

            L[i] = arr[l + i];

        for (int j = 0; j < n2; ++j)

            R[j] = arr[m + 1 + j];



        /* Merge the temporary arrays */



        // Initial indexes of first and second subarrays

        int i = 0, j = 0;



        // Initial index of merged subarray array

        int k = l;

        while (i < n1 && j < n2) {

            if (L[i] <= R[j]) {

                arr[k] = L[i];

                i++;

            } else {

                arr[k] = R[j];

                j++;

            }

            k++;

        }



        /* Copy remaining elements of L[] if any */

        while (i < n1) {

            arr[k] = L[i];

            i++;

            k++;

        }



        /* Copy remaining elements of R[] if any */

        while (j < n2) {

            arr[k] = R[j];

            j++;

            k++;

        }

    }



    // Main function that sorts arr[l..r] using merge()

    static void sort(int arr[], int l, int r) {

        if (l < r) {

            // Find the middle point

            int m = (l + r) / 2;



            // Sort first and second halves

            sort(arr, l, m);

            sort(arr, m + 1, r);



            // Merge the sorted halves

            merge(arr, l, m, r);

        }

    }



    // A utility function to print array of size n

    static void printArray(int arr[]) {

        int n = arr.length;

        for (int i = 0; i < n; ++i)

            System.out.print(arr[i] + " ");

        System.out.println();

    }



    // Driver method

    public static void main(String args[]) {

        int arr[] = {12, 11, 13, 5, 6, 7};



        System.out.println("Given Array");

        printArray(arr);



        sort(arr, 0, arr.length - 1);



        System.out.println("\nSorted array");

        printArray(arr);

    }

}

 

Week 2 

import java.util.*;



class TarjanAlgorithm {

    private int V; // Number of vertices

    private LinkedList<Integer> adj[]; // Adjacency list representation

    private int time = 0;

    static final int NIL = -1;



    // Constructor

    TarjanAlgorithm(int v) {

        V = v;

        adj = new LinkedList[v];

        for (int i = 0; i < v; ++i)

            adj[i] = new LinkedList<>();

    }



    // Function to add an edge into the graph

    void addEdge(int v, int w) {

        adj[v].add(w);

        adj[w].add(v); // Add w to v's list

    }



    // A recursive function that finds and prints strongly connected components using DFS traversal

    // u --> The vertex to be visited next

    // disc[] --> Stores discovery times of visited vertices

    // low[] -- >> earliest visited vertex (the vertex with minimum discovery time) that can be reached from subtree rooted with current vertex

    // parent[] --> Stores parent vertices in DFS tree

    // ap[] --> Stores articulation points

    void APUtil(int u, boolean visited[], int disc[], int low[], int parent[], boolean ap[]) {

        // Count of children in DFS Tree

        int children = 0;



        // Initialize discovery time and low value

        disc[u] = low[u] = ++time;



        // Mark the current node as visited

        visited[u] = true;



        // Go through all vertices adjacent to this

        for (Integer v : adj[u]) {

            // If v is not visited yet, then make it a child of u in DFS tree and recur for it

            if (!visited[v]) {

                children++;

                parent[v] = u;

                APUtil(v, visited, disc, low, parent, ap);



                // Check if the subtree rooted with v has a connection to one of the ancestors of u

                low[u] = Math.min(low[u], low[v]);



                // u is an articulation point in the following cases:



                // (1) u is root of DFS tree and has two or more children.

                if (parent[u] == NIL && children > 1)

                    ap[u] = true;



                // (2) If u is not root and low value of one of its child is more than discovery value of u.

                if (parent[u] != NIL && low[v] >= disc[u])

                    ap[u] = true;

            }

            // Update low value of u for parent function calls.

            else if (v != parent[u])

                low[u] = Math.min(low[u], disc[v]);

        }

    }



    // The function to do DFS traversal. It uses recursive function APUtil()

    void AP() {

        // Mark all the vertices as not visited

        boolean visited[] = new boolean[V];

        int disc[] = new int[V];

        int low[] = new int[V];

        int parent[] = new int[V];

        boolean ap[] = new boolean[V]; // To store articulation points



        // Initialize parent and visited arrays

        for (int i = 0; i < V; i++) {

            parent[i] = NIL;

            visited[i] = false;

            ap[i] = false;

        }



        // Call the recursive helper function to find articulation points in DFS tree rooted with vertex 'i'

        for (int i = 0; i < V; i++)

            if (!visited[i])

                APUtil(i, visited, disc, low, parent, ap);



        // Now ap[] contains articulation points, print them

        System.out.println("Articulation points in the given graph:");

        for (int i = 0; i < V; i++)

            if (ap[i])

                System.out.print(i + " ");

        System.out.println();

    }



    public static void main(String args[]) {

        // Create a graph given in the example

        System.out.println("Graph 1:");

        TarjanAlgorithm g1 = new TarjanAlgorithm(5);

        g1.addEdge(1, 0);

        g1.addEdge(0, 2);

        g1.addEdge(2, 1);

        g1.addEdge(0, 3);

        g1.addEdge(3, 4);

        g1.AP();



        System.out.println("\nGraph 2:");

        TarjanAlgorithm g2 = new TarjanAlgorithm(4);

        g2.addEdge(0, 1);

        g2.addEdge(1, 2);

        g2.addEdge(2, 3);

        g2.AP();



        System.out.println("\nGraph 3:");

        TarjanAlgorithm g3 = new TarjanAlgorithm(7);

        g3.addEdge(0, 1);

        g3.addEdge(1, 2);

        g3.addEdge(2, 0);

        g3.addEdge(1, 3);

        g3.addEdge(1, 4);

        g3.addEdge(1, 6);

        g3.addEdge(3, 5);

        g3.addEdge(4, 5);

        g3.AP();

    }

}

 

Week 3

import java.util.Scanner;



public class PrimAlgorithm {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        int a, b, u, v, n, i, j, ne = 1;

        int min, mincost = 0;

        int[] visited;

        int[][] cost;



        System.out.println("\n\tImplementation of Prim's algorithm\n");

        System.out.print("\n Enter the number of nodes:");

        n = scanner.nextInt();

        cost = new int[n + 1][n + 1];

        visited = new int[n + 1];

        System.out.println("\n Enter the adjacency matrix:\n");

        for (i = 1; i <= n; i++)

            for (j = 1; j <= n; j++) {

                cost[i][j] = scanner.nextInt();

                if (cost[i][j] == 0)

                    cost[i][j] = 999;

            }

        for (i = 1; i <= n; i++)

            visited[i] = 0;

        visited[1] = 1;

        while (ne < n) {

            min = 999;

            a = b = u = v = 0;

            for (i = 1; i <= n; i++)

                for (j = 1; j <= n; j++)

                    if (cost[i][j] < min)

                        if (visited[i] != 0) {

                            min = cost[i][j];

                            a = u = i;

                            b = v = j;

                        }

            if (visited[u] == 0 || visited[v] == 0) {

                System.out.println("\n Edge " + ne + ":(" + a + " " + b + ") cost:" + min);

                ne++;

                mincost += min;

                visited[b] = 1;

            }

            cost[a][b] = cost[b][a] = 999;

        }

        System.out.println("\n Minimum cost=" + mincost);

    }

}





import java.util.Scanner;



public class KruskalAlgorithm {

    static int i, j, k, a, b, u, v, n, ne = 1;

    static int min, mincost = 0;

    static int[][] cost = new int[9][9];

    static int[] parent = new int[9];



    static int find(int i) {

        while (parent[i] != 0)

            i = parent[i];

        return i;

    }



    static int uni(int i, int j) {

        if (i != j) {

            parent[j] = i;

            return 1;

        }

        return 0;

    }



    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        System.out.println("\n\tImplementation of Kruskal's algorithm\n");

        System.out.print("Enter the no. of vertices:");

        n = scanner.nextInt();

        System.out.println("Enter the cost adjacency matrix:");

        for (i = 1; i <= n; i++) {

            for (j = 1; j <= n; j++) {

                cost[i][j] = scanner.nextInt();

                if (cost[i][j] == 0)

                    cost[i][j] = 999;

            }

        }

        System.out.println("The edges of Minimum Cost Spanning Tree are");

        while (ne < n) {

            min = 999;

            for (i = 1; i <= n; i++) {

                for (j = 1; j <= n; j++) {

                    if (cost[i][j] < min) {

                        min = cost[i][j];

                        a = u = i;

                        b = v = j;

                    }

                }

            }

            u = find(u);

            v = find(v);

            if (uni(u, v) == 1) {

                System.out.println(ne++ + " edge (" + a + "," + b + ") =" + min);

                mincost += min;

            }

            cost[a][b] = cost[b][a] = 999;

        }

        System.out.println("\n\tMinimum cost = " + mincost);

    }

}

 

Week 4

import java.util.Scanner;



public class Dijkstra {

    static final int MAX = 20;

    static int[][] cost = new int[MAX][MAX];



    public static void main(String[] args) {

        int i, j, n, u;

        Scanner scanner = new Scanner(System.in);



        System.out.print("Enter number of vertices: ");

        n = scanner.nextInt();



        System.out.println("\nEnter the adjacency matrix (0 for same node, -1 for no edge):");

        for (i = 1; i <= n; i++) {

            for (j = 1; j <= n; j++) {

                cost[i][j] = scanner.nextInt();

                if (cost[i][j] == -1)

                    cost[i][j] = 999;

            }

            cost[i][i] = 0;

        }



        System.out.print("\nEnter the starting node: ");

        u = scanner.nextInt();



        dijkstra(cost, n, u);

    }



    static void dijkstra(int[][] cost, int n, int startnode) {

        int[] distance = new int[MAX];

        int[] pred = new int[MAX];

        int[] select = new int[MAX];

        int count, mindistance, chosen, i, j;



        for (i = 1; i <= n; i++) {

            distance[i] = cost[startnode][i];

            pred[i] = startnode;

            select[i] = 0;

        }



        distance[startnode] = 0;

        select[startnode] = 1;

        count = 1;



        while (count < n - 1) {

            mindistance = 999;

            chosen = 0;

            for (i = 1; i <= n; i++) {

                if (distance[i] < mindistance && select[i] == 0) {

                    mindistance = distance[i];

                    chosen = i;

                }

            }

            select[chosen] = 1;

            for (i = 1; i <= n; i++) {

                if (select[i] == 0) {

                    if (mindistance + cost[chosen][i] < distance[i]) {

                        distance[i] = mindistance + cost[chosen][i];

                        pred[i] = chosen;

                    }

                }

            }

            count++;

        }



        for (i = 1; i <= n; i++)

            System.out.print(pred[i] + " ");



        for (i = 1; i <= n; i++) {

            if (i != startnode) {

                System.out.println("\nDistance to node " + i + " = " + distance[i]);

                System.out.print("Path is " + i);

                j = i;

                do {

                    j = pred[j];

                    System.out.print("<-" + j);

                } while (j != startnode);

                System.out.println();

            }

        }

    }

}

 

Week 5

import java.util.Scanner;



public class JobScheduling {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        int[] slot = new int[11]; // Array size increased by 1 to match C indexing

        int profit = 0;

        int[] p = new int[11];

        int[] d = new int[11];

        int n, i, j, k = 0, t;

        int[] seq = new int[11]; // Array size increased by 1 to match C indexing



        System.out.print("Enter the number of jobs: ");

        n = scanner.nextInt();



        for (i = 1; i <= n; i++) {

            System.out.printf("\nEnter the profit and deadline of job #%d: ", i);

            p[i] = scanner.nextInt();

            d[i] = scanner.nextInt();

        }



        for (i = 1; i <= n; i++) {

            for (j = i + 1; j <= n; j++) {

                if (p[i] < p[j]) {

                    t = p[i];

                    p[i] = p[j];

                    p[j] = t;

                    t = d[i];

                    d[i] = d[j];

                    d[j] = t;

                }

            }

        }



        for (i = 1; i <= n; i++) {

            for (j = d[i]; j >= 1; j--) {

                if (slot[j] == 0) {

                    slot[j] = i;

                    profit += p[i];

                    break;

                }

            }

        }



        System.out.println("\nSlot assignment Array");

        for (i = 1; i < n; i++)

            System.out.print(slot[i] + " ");



        System.out.println("\nJobs and deadlines Array");

        for (i = 1; i <= n; i++)

            System.out.println(p[i] + " " + d[i]);



        System.out.println("\n\nJOB No   PROFIT  DEADLINE  SLOT ALLOTTED");

        for (i = 1; i <= n; i++) {

            if (slot[i] > 0)

                System.out.printf("\n\n   %d       %d        %d        [%d - %d]", slot[i], p[slot[i]], d[slot[i]], i - 1, i);

        }



        System.out.println("\nTotal Profit=" + profit);

    }

}

 

Week 6

import java.util.Scanner;



public class MatrixChainMultiplication {

    static final int INFY = 999;

    static long[][] m = new long[20][20];

    static int[][] s = new int[20][20];

    static int[] p = new int[20];

    static int n;



    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        int k, i, j;



        System.out.print("Enter the number of elements: ");

        n = scanner.nextInt();



        for (i = 1; i <= n; i++)

            for (j = i + 1; j <= n; j++) {

                m[i][i] = 0;

                m[i][j] = INFY;

                s[i][j] = 0;

            }



        System.out.println("\nEnter the dimensions:");

        for (k = 0; k <= n; k++) {

            System.out.printf("P%d: ", k);

            p[k] = scanner.nextInt();

        }



        matMultiply();



        System.out.println("\nCost Matrix M:");

        for (i = 1; i <= n; i++)

            for (j = i; j <= n; j++)

                System.out.printf("m[%d][%d]: %d\n", i, j, m[i][j]);



        System.out.println("\nMatrix S for k values:");

        for (i = 1; i <= n; i++)

            for (j = i; j <= n; j++)

                System.out.printf("s[%d][%d]: %d\n", i, j, s[i][j]);



        i = 1;

        j = n;

        System.out.print("\nMULTIPLICATION SEQUENCE : ");

        printOptimal(i, j);

    }



    static void printOptimal(int i, int j) {

        if (i == j)

            System.out.printf(" A%d ", i);

        else {

            System.out.print(" ( ");

            printOptimal(i, s[i][j]);

            printOptimal(s[i][j] + 1, j);

            System.out.print(" ) ");

        }

    }



    static void matMultiply() {

        long q;

        int k;

        for (i = n; i > 0; i--) {

            for (j = i; j <= n; j++) {

                if (i == j)

                    m[i][j] = 0;

                else {

                    for (k = i; k < j; k++) {

                        q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];

                        if (q < m[i][j]) {

                            m[i][j] = q;

                            s[i][j] = k;

                        }

                    }

                }

            }

        }

    }

}

 

WEEK-7: Java program implementing the 0/1 Knapsack problem using Dynamic Programming:

import java.util.Scanner;

		 

		public class Knapsack

		{

		    static int max(int a, int b) 

		    { 

		        return (a > b)? a : b; 

		    }

		    static int knapSack(int W, int wt[], int val[], int n)

		    {

		        int i, w;

		        int [][]K = new int[n+1][W+1];

		 

			   // Build table K[][] in bottom up manner

		        for (i = 0; i <= n; i++)

	        {

		            for (w = 0; w <= W; w++)

		            {

		                if (i==0 || w==0)

		                    K[i][w] = 0;

		                else if (wt[i-1] <= w)

		                    K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);

		                else

		                    K[i][w] = K[i-1][w];

		            }

		        }

		 

		        return K[n][W];

		    }

		 

	    public static void main(String args[])

		    {

		        Scanner sc = new Scanner(System.in);

		        System.out.println("Enter the number of items: ");

		        int n = sc.nextInt();

		        System.out.println("Enter the items weights: ");

		        int []wt = new int[n];

		        for(int i=0; i<n; i++)

		            wt[i] = sc.nextInt();

		 

		        System.out.println("Enter the items values: ");

		        int []val = new int[n];

		        for(int i=0; i<n; i++)

		            val[i] = sc.nextInt();

		 

		        System.out.println("Enter the maximum capacity: ");

	                 int W = sc.nextInt();	 

		       

                            System.out.println("The maximum value that can be put in a knapsack of capacity W  is: " + 

                            knapSack(W, wt, val, n));

		    sc.close();

		    }

		}

 

WEEK-8: Implement an algorithm to find the optimal binary search tree for the given list of identifiers.



public class Optimal_BST2 {

    

    static int optimalSearchTree(int keys[], int freq[], int n) {

 

        /* Create an auxiliary 2D matrix to store results of 

           subproblems */

        int cost[][] = new int[n + 1][n + 1];

 

        /* cost[i][j] = Optimal cost of binary search tree that 

           can be formed from keys[i] to keys[j]. cost[0][n-1] 

           will store the resultant cost */

 

        // For a single key, cost is equal to frequency of the key

        for (int i = 0; i < n; i++)

            cost[i][i] = freq[i];

 

        // Now we need to consider chains of length 2, 3, ... .

        // L is chain length.

        for (int L = 2; L <= n; L++) {

 

            // i is row number in cost[][]

            for (int i = 0; i <= n - L + 1; i++) {

 

                // Get column number j from row number i and 

                // chain length L

                int j = i + L - 1;

                cost[i][j] = Integer.MAX_V
