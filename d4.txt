//sssp hackerrank
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <stdbool.h>

#define INF 1000000

int* shortestReach(int n, int edges_rows, int edges_columns, int** edges, int s, int* result_count) {
    int** graph = malloc((n + 1) * sizeof(int*));
    for (int i = 0; i <= n; i++) {
        graph[i] = malloc((n + 1) * sizeof(int));
        for (int j = 0; j <= n; j++) {
            graph[i][j] = INF;
        }
    }

    for (int i = 0; i < edges_rows; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        int w = edges[i][2];
        if (w < graph[u][v]) {
            graph[u][v] = w;
            graph[v][u] = w;
        }
    }

    int* dist = malloc((n + 1) * sizeof(int));
    bool* visited = calloc(n + 1, sizeof(bool));
    for (int i = 1; i <= n; i++) dist[i] = INF;
    dist[s] = 0;

    for (int i = 1; i <= n; i++) {
        int u = -1;
        for (int j = 1; j <= n; j++) {
            if (!visited[j] && (u == -1 || dist[j] < dist[u])) u = j;
        }
        if (dist[u] == INF) break;
        visited[u] = true;
        for (int v = 1; v <= n; v++) {
            if (!visited[v] && graph[u][v] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    *result_count = n - 1;
    int* result = malloc(*result_count * sizeof(int));
    int idx = 0;
    for (int i = 1; i <= n; i++) {
        if (i == s) continue;
        result[idx++] = dist[i] == INF ? -1 : dist[i];
    }

    for (int i = 0; i <= n; i++) free(graph[i]);
    free(graph);
    free(dist);
    free(visited);
    return result;
}












//online compiler
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <stdbool.h>

#define INF 1000000

int main() {
    int n, m;
    printf("Enter number of nodes and edges:\n");
    scanf("%d %d", &n, &m);

    int graph[n + 1][n + 1];
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= n; j++)
            graph[i][j] = INF;

    printf("Enter edges (start end weight):\n");
    for (int i = 0; i < m; i++) {
        int u, v, w;
        scanf("%d %d %d", &u, &v, &w);
        if (w < graph[u][v]) {
            graph[u][v] = w;
            graph[v][u] = w;
        }
    }

    int s;
    printf("Enter starting node:\n");
    scanf("%d", &s);

    int dist[n + 1];
    bool visited[n + 1];
    for (int i = 1; i <= n; i++) {
        dist[i] = INF;
        visited[i] = false;
    }
    dist[s] = 0;

    printf("\nStarting Dijkstra from node %d...\n", s);

    for (int i = 1; i <= n; i++) {
        int u = -1;
        for (int j = 1; j <= n; j++) {
            if (!visited[j] && (u == -1 || dist[j] < dist[u]))
                u = j;
        }

        if (u == -1 || dist[u] == INF) break;

        printf("Node chosen: %d with current distance: %d\n", u, dist[u]);

        visited[u] = true;

        for (int v = 1; v <= n; v++) {
            if (!visited[v] && graph[u][v] != INF) {
                if (dist[u] + graph[u][v] < dist[v]) {
                    dist[v] = dist[u] + graph[u][v];
                    printf("Updated distance of node %d to %d\n", v, dist[v]);
                }
            }
        }
    }

    printf("\nShortest distances from node %d:\n", s);
    for (int i = 1; i <= n; i++) {
        if (i == s) continue;
        if (dist[i] == INF)
            printf("Node %d: -1 (unreachable)\n", i);
        else
            printf("Node %d: %d\n", i, dist[i]);
    }

    return 0;
}





input:
Enter number of nodes and edges:
5 4
Enter edges (start end weight):
1 2 5
2 3 6
3 4 2
1 3 15

Enter starting node:
1

Starting Dijkstra from node 1...
Node chosen: 1 with current distance: 0
Updated distance of node 2 to 5
Updated distance of node 3 to 15
Node chosen: 2 with current distance: 5
Updated distance of node 3 to 11
Node chosen: 3 with current distance: 11
Updated distance of node 4 to 13
Node chosen: 4 with current distance: 13

Shortest distances from node 1:
Node 2: 5
Node 3: 11
Node 4: 13
Node 5: -1 (unreachable)









//viss
#include <stdio.h>
#define INF 9999
#define MAX 100

void dijkstra(int cost[MAX][MAX], int dist[MAX], int n, int v) {
    int visited[MAX] = {0};
    for (int i = 0; i < n; i++) {
        dist[i] = cost[v][i];
    }

    visited[v] = 1;
    dist[v] = 0;

    for (int count = 1; count < n; count++) {
        int min = INF, u = -1;
        for (int i = 0; i < n; i++) {
            if (!visited[i] && dist[i] < min) {
                min = dist[i];
                u = i;
            }
        }

        visited[u] = 1;

        for (int w = 0; w < n; w++) {
            if (!visited[w] && dist[u] + cost[u][w] < dist[w]) {
                dist[w] = dist[u] + cost[u][w];
            }
        }
    }
}

int main() {
    int n, v, cost[MAX][MAX], dist[MAX];

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter adjacency matrix (9999 if no path):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
        }
    }

    printf("Enter starting vertex (0 to %d): ", n - 1);
    scanf("%d", &v);

    dijkstra(cost, dist, n, v);

    printf("Shortest distances from vertex %d:\n", v);
    for (int i = 0; i < n; i++) {
        printf("To %d: %d\n", i, dist[i]);
    }

    return 0;
}




output:
Enter number of vertices: 5
Enter adjacency matrix (9999 if no path):
0 10 9999 30 100
10 0 50 9999 9999
9999 50 0 20 10
30 9999 20 0 60
100 9999 10 60 0
Enter starting vertex (0 to 4): 
0
Shortest distances from vertex 0:
To 0: 0
To 1: 10
To 2: 50
To 3: 30
To 4: 60


=== Code Execution Successful ===
