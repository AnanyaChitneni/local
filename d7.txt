//knapsack hackerrank
#include <stdio.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

int main() {
    int n, c;
    scanf("%d %d", &n, &c);
    int v[n], w[n];

    for (int i = 0; i < n; i++)
        scanf("%d", &v[i]);

    for (int i = 0; i < n; i++)
        scanf("%d", &w[i]);

    int dp[c + 1];
    for (int i = 0; i <= c; i++)
        dp[i] = 0;

    for (int i = 0; i < n; i++) {
        for (int j = c; j >= w[i]; j--) {
            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);
        }
    }

    printf("%d\n", dp[c]);

    return 0;
}







//online compiler
#include <stdio.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

int main() {
    int n, c;
    printf("Enter number of objects: ");
    scanf("%d", &n);
    printf("Enter capacity of knapsack: ");
    scanf("%d", &c);

    int v[n], w[n];

    printf("Enter values of the objects:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &v[i]);

    printf("Enter weights of the objects:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &w[i]);

    int dp[c + 1];
    for (int i = 0; i <= c; i++)
        dp[i] = 0;

    for (int i = 0; i < n; i++) {
        for (int j = c; j >= w[i]; j--) {
            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);
        }
    }

    printf("Maximum value that can be taken in knapsack: %d\n", dp[c]);

    return 0;
}





output:
Enter number of objects: 4
Enter capacity of knapsack: 20
Enter values of the objects:
10 2 1 3
Enter weights of the objects:
10 5 10 10
Maximum value that can be taken in knapsack: 13


=== Code Execution Successful ===









//sandhya
import java.io.*;
import java.util.*;

class PW {
    int p, w;
    PW(int p, int w) {
        this.p = p;
        this.w = w;
    }
}

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(); // number of items
        int m = sc.nextInt(); // knapsack capacity

        int[] p = new int[n + 1]; // profits
        int[] w = new int[n + 1]; // weights

        for (int i = 1; i <= n; i++)
            p[i] = sc.nextInt();
        for (int i = 1; i <= n; i++)
            w[i] = sc.nextInt();

        DKnap(p, w, n, m);
    }

    static void DKnap(int[] p, int[] w, int n, int m) {
        PW[] pair = new PW[10000];
        int[] b = new int[n + 2];
        int t, h, next;
        b[0] = 1;
        pair[1] = new PW(0, 0);
        t = 1;
        h = 1;
        b[1] = next = 2;

        for (int i = 1; i <= n; i++) {
            int k = t;
            int pp, ww;
            int u = largest(pair, w, t, h, i, m);
            for (int j = t; j <= u; j++) {
                pp = pair[j].p + p[i];
                ww = pair[j].w + w[i];

                while ((k <= h) && pair[k].w <= ww) {
                    pair[next] = new PW(pair[k].p, pair[k].w);
                    next++;
                    k++;
                }

                if ((k <= h) && pair[k].w == ww) {
                    if (pp < pair[k].p)
                        pp = pair[k].p;
                    k++;
                }

                if ((next == 2) || (pair[next - 1] != null && pp > pair[next - 1].p)) {
                    pair[next] = new PW(pp, ww);
                    next++;
                }
                while ((k <= h) && (pair[next - 1] != null) && pair[k].p <= pair[next - 1].p) {
                    k++;
                }
            }

            while (k <= h) {
                pair[next] = new PW(pair[k].p, pair[k].w);
                next++;
                k++;
            }

            t = h + 1;
            h = next - 1;
            b[i + 1] = next;
        }

        int max = 0;
        for (int j = b[n]; j < b[n + 1]; j++) {
            if (pair[j] != null && pair[j].w <= m && pair[j].p > max)
                max = pair[j].p;
        }

        System.out.println(max);
    }

    static int largest(PW[] pair, int[] w, int t, int h, int i, int m) {
        for (int j = h; j >= t; j--) {
            if (pair[j] != null && pair[j].w + w[i] <= m)
                return j;
        }
        return t - 1;
    }
}
