//knapsack hackerrank
#include <stdio.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

int main() {
    int n, c;
    scanf("%d %d", &n, &c);
    int v[n], w[n];

    for (int i = 0; i < n; i++)
        scanf("%d", &v[i]);

    for (int i = 0; i < n; i++)
        scanf("%d", &w[i]);

    int dp[c + 1];
    for (int i = 0; i <= c; i++)
        dp[i] = 0;

    for (int i = 0; i < n; i++) {
        for (int j = c; j >= w[i]; j--) {
            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);
        }
    }

    printf("%d\n", dp[c]);

    return 0;
}







//online compiler
#include <stdio.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

int main() {
    int n, c;
    printf("Enter number of objects: ");
    scanf("%d", &n);
    printf("Enter capacity of knapsack: ");
    scanf("%d", &c);

    int v[n], w[n];

    printf("Enter values of the objects:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &v[i]);

    printf("Enter weights of the objects:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &w[i]);

    int dp[c + 1];
    for (int i = 0; i <= c; i++)
        dp[i] = 0;

    for (int i = 0; i < n; i++) {
        for (int j = c; j >= w[i]; j--) {
            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);
        }
    }

    printf("Maximum value that can be taken in knapsack: %d\n", dp[c]);

    return 0;
}





output:
Enter number of objects: 4
Enter capacity of knapsack: 20
Enter values of the objects:
10 2 1 3
Enter weights of the objects:
10 5 10 10
Maximum value that can be taken in knapsack: 13


=== Code Execution Successful ===
