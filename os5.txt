week 5
//sequential
#include <stdio.h>

int main() {
    int n, i, j, b[20], sb[20], t[20], x, c[20][20];
    
    printf("Enter no. of files: ");
    scanf("%d", &n);
    
    for (i = 0; i < n; i++) {
        printf("Enter no. of blocks occupied by file %d: ", i + 1);
        scanf("%d", &b[i]);
        printf("Enter the starting block of file %d: ", i + 1);
        scanf("%d", &sb[i]);
        t[i] = sb[i];
        for (j = 0; j < b[i]; j++) {
            c[i][j] = sb[i]++;
        }
    }

    printf("\n%-10s%-15s%-10s\n", "Filename", "Start block", "Length");
    for (i = 0; i < n; i++) {
        printf("%-10d%-15d%-10d\n", i + 1, t[i], b[i]);
    }

    printf("\nEnter file name (number): ");
    scanf("%d", &x);

    printf("\nFile name is: %d", x);
    printf("\nLength is: %d", b[x - 1]);
    printf("\nBlocks occupied: ");
    for (i = 0; i < b[x - 1]; i++) {
        printf("%4d", c[x - 1][i]);
    }
    printf("\n");

    return 0;
}













//Indexed
#include <stdio.h>

int main() {
    int n, m[20], i, j, sb[20], b[20][20], x;

    printf("Enter number of files: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("\nEnter index block of file %d: ", i + 1);
        scanf("%d", &sb[i]);

        printf("Enter length of file %d: ", i + 1);
        scanf("%d", &m[i]);

        printf("Enter blocks of file %d: ", i + 1);
        for (j = 0; j < m[i]; j++) {
            scanf("%d", &b[i][j]);
        }
    }

    printf("\nFile     IndexBlock     Length\n");
    for (i = 0; i < n; i++) {
        printf("%-8d%-15d%-7d\n", i + 1, sb[i], m[i]);
    }

    printf("\nEnter file name (number): ");
    scanf("%d", &x);

    printf("\nFile name is: %d\n", x);
    printf("Index Block is: %d\n", sb[x - 1]);
    printf("Blocks occupied are: ");
    for (j = 0; j < m[x - 1]; j++) {
        printf("%d ", b[x - 1][j]);
    }

    printf("\n");
    return 0;
}













//Linked
#include <stdio.h>

struct file {
    char fname[10];
    int start, size, block[10];
} f[10];

int main() {
    int i, j, n;

    printf("Enter number of files: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("\nEnter file name: ");
        scanf("%s", f[i].fname);

        printf("Enter starting block: ");
        scanf("%d", &f[i].start);
        f[i].block[0] = f[i].start;

        printf("Enter number of blocks: ");
        scanf("%d", &f[i].size);

        printf("Enter block numbers: ");
        for (j = 1; j < f[i].size; j++) {
            scanf("%d", &f[i].block[j]);
        }
    }

    printf("\n%-10s %-10s %-10s %-10s\n", "File", "Start", "Size", "Blocks");
    for (i = 0; i < n; i++) {
        printf("%-10s %-10d %-10d ", f[i].fname, f[i].start, f[i].size);
        for (j = 0; j < f[i].size - 1; j++) {
            printf("%d -> ", f[i].block[j]);
        }
        printf("%d\n", f[i].block[j]); // last block without arrow
    }

    return 0;
}

















Week 6
#include <stdio.h> 
int main()
{

int n, m, i, j, k;
n = 5; 
m = 3; 
int alloc[5][3] = { { 0, 1, 0 }, 
                    { 2, 0, 0 }, 
                    { 3, 0, 2 }, 
                    { 2, 1, 1 }, 
                    { 0, 0, 2 } }; 

int max[5][3] = { { 7, 5, 3 }, 
                  { 3, 2, 2 }, 
                  { 9, 0, 2 }, 
                  { 2, 2, 2 }, 
                  { 4, 3, 3 } }; 

int avail[3] = { 3, 3, 2 }; 
int f[n], ans[n], ind = 0;
for (k = 0; k < n; k++) { 
    f[k] = 0;
}

int need[n][m];
for (i = 0; i < n; i++) { 
    for (j = 0; j < m; j++)
        need[i][j] = max[i][j] - alloc[i][j];
}

int y = 0;
for (k = 0; k < 5; k++) { 
    for (i = 0; i < n; i++) {
        if (f[i] == 0) {

            int flag = 0;
            for (j = 0; j < m; j++) {
                if (need[i][j] > avail[j]){
                    flag = 1;
                    break;
                }
            }

            if (flag == 0) { 
                ans[ind++] = i;
                for (y = 0; y < m; y++) 
                    avail[y] += alloc[i][y];
                f[i] = 1;
            }
        }
    }
}

printf("Following is the SAFE Sequence\n"); 
for (i = 0; i < n - 1; i++)
    printf(" P%d ->", ans[i]);
printf(" P%d", ans[n - 1]); 
return (0);
}
