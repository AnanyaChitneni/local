//prims hackerrank

int prims(int n, int edges_rows, int edges_columns, int** edges, int start) {
    int cost[n + 1][n + 1];
    int near[n + 1];
    int i, j, k, u = -1, v = -1, min;
    int mincost = 0;

    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            cost[i][j] = INT_MAX;

    for (i = 0; i < edges_rows; i++) {
        int a = edges[i][0];
        int b = edges[i][1];
        int c = edges[i][2];
        if (c < cost[a][b])
            cost[a][b] = cost[b][a] = c;
    }

    for (i = 1; i <= n; i++) {
        near[i] = start;
    }
    near[start] = 0;

    for (i = 1; i < n; i++) {
        min = INT_MAX;
        for (j = 1; j <= n; j++) {
            if (near[j] != 0 && cost[j][near[j]] < min) {
                min = cost[j][near[j]];
                u = j;
            }
        }
        mincost += cost[u][near[u]];
        near[u] = 0;

        for (k = 1; k <= n; k++) {
            if (near[k] != 0 && cost[k][near[k]] > cost[k][u]) {
                near[k] = u;
            }
        }
    }

    return mincost;
}










//online compiler


#include <stdio.h>
#define INF 99999

int main() {
    int n, e;
    scanf("%d %d", &n, &e);

    int cost[301][301];
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= n; j++)
            cost[i][j] = INF;

    for (int i = 0; i < e; i++) {
        int u, v, w;
        scanf("%d %d %d", &u, &v, &w);
        if (w < cost[u][v])
            cost[u][v] = cost[v][u] = w;
    }

    int start;
    scanf("%d", &start);

    int near[301], t[301][2];
    int min = INF, u, v;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i != j && cost[i][j] < min) {
                min = cost[i][j];
                u = i;
                v = j;
            }
        }
    }

    t[1][0] = u;
    t[1][1] = v;
    int mincost = cost[u][v];
    for (int i = 1; i <= n; i++) {
        if (cost[i][v] < cost[i][u])
            near[i] = v;
        else
            near[i] = u;
    }
    near[u] = near[v] = 0;

    for (int i = 2; i <= n - 1; i++) {
        int min = INF, k;
        for (int j = 1; j <= n; j++) {
            if (near[j] != 0 && cost[j][near[j]] < min) {
                min = cost[j][near[j]];
                k = j;
            }
        }
        t[i][0] = k;
        t[i][1] = near[k];
        mincost += cost[k][near[k]];
        near[k] = 0;
        for (int j = 1; j <= n; j++) {
            if (near[j] != 0 && cost[j][near[j]] > cost[j][k])
                near[j] = k;
        }
    }

    printf("%d\n", mincost);
    return 0;
}



input:
5 6
1 2 3
1 3 4
4 2 6
5 2 2
2 3 5
3 5 7
1


output:
15







//online compiler
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
int prims(int n, int edges_rows, int edges_columns, int** edges, int start) {
    int cost[n + 1][n + 1];
    int near[n + 1];
    int i, j, k, u = -1, v = -1, min;
    int mincost = 0;

    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            cost[i][j] = INT_MAX;

    for (i = 0; i < edges_rows; i++) {
        int a = edges[i][0];
        int b = edges[i][1];
        int c = edges[i][2];
        if (c < cost[a][b])
            cost[a][b] = cost[b][a] = c;
    }

    for (i = 1; i <= n; i++) {
        near[i] = start;
    }
    near[start] = 0;

    for (i = 1; i < n; i++) {
        min = INT_MAX;
        for (j = 1; j <= n; j++) {
            if (near[j] != 0 && cost[j][near[j]] < min) {
                min = cost[j][near[j]];
                u = j;
            }
        }
        mincost += cost[u][near[u]];
        near[u] = 0;

        for (k = 1; k <= n; k++) {
            if (near[k] != 0 && cost[k][near[k]] > cost[k][u]) {
                near[k] = u;
            }
        }
    }

    return mincost;
}

int main() {
    int n, e, i;
    scanf("%d %d", &n, &e);

    int edges_columns = 3;
    int* edges[e];
    for (i = 0; i < e; i++) {
        edges[i] = (int*)malloc(edges_columns * sizeof(int));
        scanf("%d %d %d", &edges[i][0], &edges[i][1], &edges[i][2]);
    }

    int start;
    scanf("%d", &start);

    int result = prims(n, e, edges_columns, edges, start);
    printf("%d\n", result);

    for (i = 0; i < e; i++) {
        free(edges[i]);
    }

    return 0;
}

